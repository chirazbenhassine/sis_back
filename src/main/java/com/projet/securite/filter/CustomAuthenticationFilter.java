package com.projet.securite.filter;import com.auth0.jwt.JWT;import com.auth0.jwt.algorithms.Algorithm;import com.fasterxml.jackson.databind.ObjectMapper;import com.projet.securite.security.JWTUTIL;import com.projet.securite.service.UserImpl;import lombok.extern.slf4j.Slf4j;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import javax.servlet.FilterChain;import javax.servlet.ServletException;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.stream.Collectors;import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;@Slf4jpublic class CustomAuthenticationFilter extends UsernamePasswordAuthenticationFilter {    private final AuthenticationManager authentificationManager;    public CustomAuthenticationFilter(AuthenticationManager authentificationManager) {        this.authentificationManager = authentificationManager;    }    @Override    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {        String username = request.getParameter("username");        String password = request.getParameter("password");        log.info("Username is: {}", username);        log.info("Password is: {}", password);        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username, password);        return  authentificationManager.authenticate(authenticationToken);    }    @Override    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authentication) throws IOException, ServletException {        Algorithm algorithm = Algorithm.HMAC256(JWTUTIL.SECRET);        UserImpl user1 = (UserImpl) authentication.getPrincipal();        String access_token = JWT.create()                .withSubject(user1.getUsername())                .withExpiresAt(new Date(System.currentTimeMillis() + JWTUTIL.EXPIRE_ACCESS_TOKEN))                .withIssuer(request.getRequestURL().toString())                .withClaim("roles", user1.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()))                .sign(algorithm);        String refresh_token = JWT.create()                .withSubject(user1.getUsername())                .withExpiresAt(new Date(System.currentTimeMillis() + JWTUTIL.EXPIRE_ACCESS_TOKEN))                .withIssuer(request.getRequestURL().toString())                .sign(algorithm);        /*response.setHeader("access_token", access_token);        response.setHeader("refresh_token", refresh_token);*/        Map<String, Map> result = new HashMap<>(); // object contient cl√©(string): valeur(map) : objet global         Map<String, String> data = new HashMap<>(); // infos sur user        Map<String, String> tokens = new HashMap<>();        tokens.put("access_token", access_token);        tokens.put("refresh_token", refresh_token);        data.put("username", user1.getUsername());        data.put("nom", user1.getNom());        data.put("prenom", user1.getPrenom());        result.put("tokens", tokens);        result.put("data", data);        response.setContentType(APPLICATION_JSON_VALUE);        new ObjectMapper().writeValue(response.getOutputStream(),result);    }}
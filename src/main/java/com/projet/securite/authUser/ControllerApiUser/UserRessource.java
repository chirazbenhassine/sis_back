package com.projet.securite.authUser.ControllerApiUser;import com.auth0.jwt.JWT;import com.auth0.jwt.JWTVerifier;import com.auth0.jwt.algorithms.Algorithm;import com.auth0.jwt.interfaces.DecodedJWT;import com.fasterxml.jackson.databind.ObjectMapper;import com.projet.securite.authUser.model.Role;import com.projet.securite.authUser.model.User;import com.projet.securite.authUser.security.JWTUTIL;import com.projet.securite.authUser.serviceUser.UserService;import lombok.Data;import lombok.RequiredArgsConstructor;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.net.URI;import java.security.Principal;import java.util.*;import java.util.stream.Collectors;import static java.util.Arrays.stream;import static org.springframework.http.HttpStatus.FORBIDDEN;import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;@RestController@RequestMapping("/api")@RequiredArgsConstructorpublic class UserRessource {    private final UserService userService;    @GetMapping("/users")    public ResponseEntity<List<User>> getUsers() {        return ResponseEntity.ok().body(userService.getUsers());    }    @PostMapping("/users/save")    public ResponseEntity<User> saveUser(@RequestBody User user) {        URI uri = URI.create(ServletUriComponentsBuilder.fromCurrentContextPath().path("/api/user/save").toUriString());        return ResponseEntity.created(uri).body(userService.saveUser(user));    }    @PostMapping("/role/save")    public ResponseEntity<Role> saveRole(@RequestBody Role role) {        URI uri = URI.create(ServletUriComponentsBuilder.fromCurrentContextPath().path("/api/user/save").toUriString());        return ResponseEntity.created(uri).body(userService.saveRole(role));    }    @PostMapping("/role/addToUser")    public ResponseEntity<?> saveRoleToUser(@RequestBody RoleToUserForm form) {        userService.addRoleToUser(form.getUsername(),form.getRoleName());        return ResponseEntity.ok().build();    }    @GetMapping("/token/refresh")    public void refreshToken(HttpServletRequest request, HttpServletResponse response) throws IOException {        String authorizationHeader = request.getHeader(JWTUTIL.AUTH_HEADER);          if(authorizationHeader != null && authorizationHeader.startsWith(JWTUTIL.PREFIX)){                try {                    String refresh_token = authorizationHeader.substring(JWTUTIL.PREFIX.length());                    Algorithm algorithm = Algorithm.HMAC256(JWTUTIL.SECRET);                    JWTVerifier verifier = JWT.require(algorithm).build();                    DecodedJWT decodedJWT = verifier.verify(refresh_token);                    String username = decodedJWT.getSubject();                    User user = userService.getUser(username);                    String access_token = JWT.create()                            .withSubject(user.getUsername())                            .withExpiresAt(new Date(System.currentTimeMillis() + JWTUTIL.EXPIRE_ACCESS_TOKEN))                            .withIssuer(request.getRequestURL().toString())                            .withClaim("roles", user.getRoles().stream().map(Role::getName).collect(Collectors.toList()))                            .sign(algorithm);                    Map<String, String> tokens = new HashMap<>();                    tokens.put("access_token", access_token);                    tokens.put("refresh_token", refresh_token);                    response.setContentType(APPLICATION_JSON_VALUE);                    new ObjectMapper().writeValue(response.getOutputStream(),tokens);                }catch (Exception exception){                    response.setHeader("error", exception.getMessage());                    response.setStatus(FORBIDDEN.value());                    //response.sendError(FORBIDDEN.value());                    Map<String, String> error = new HashMap<>();                    error.put("error_message", exception.getMessage());                    response.setContentType(APPLICATION_JSON_VALUE);                    new ObjectMapper().writeValue(response.getOutputStream(),error);                }            }else {                throw new RuntimeException("Refresh token is missing");            }    }    @GetMapping("/profile")    public User profile(Principal principal){        return  userService.getUser(principal.getName());    }}@Dataclass RoleToUserForm {    private String username;    private String roleName;}
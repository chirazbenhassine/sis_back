package com.projet.securite.authUser.model;import com.fasterxml.jackson.annotation.JsonProperty;import com.projet.securite.api.model.Site;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;import javax.persistence.*;import java.io.Serializable;import java.util.ArrayList;import java.util.Collection;@Entity@Data@NoArgsConstructor@AllArgsConstructorpublic class User implements Serializable {    @Id @GeneratedValue(strategy = GenerationType.AUTO)    private Long id;    private String nom;    private String prenom;    @Column(unique=true) // unique username    private String username;    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)    private String password;    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL)    @JoinTable(name = "user_roles",            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),            inverseJoinColumns = @JoinColumn(name = "roles_id", referencedColumnName = "id"))    private Collection<Role> roles = new ArrayList<>();    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)    @JoinTable(name = "user_sites",            joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "id"),            inverseJoinColumns = @JoinColumn(name = "sites_id", referencedColumnName = "id"))    private Collection<Site> sites = new ArrayList<>();    /*    @ManyToMany( fetch = FetchType.EAGER,cascade = {            CascadeType.PERSIST,            CascadeType.MERGE    },            mappedBy = "users")    @JoinTable(name="user_site")    private Collection<Site> sites = new ArrayList<>();     */}